// Code generated by go-bindata.
// sources:
// assets/errors.csv
// DO NOT EDIT!

package errors

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsErrorsCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\x41\x8f\xd3\x30\x10\x85\xef\xfc\x8a\xb9\x71\x89\x5a\xa7\xbb\xbd\x70\xab\x56\x5c\x90\x58\x90\x16\x2e\xdc\x5c\xfb\xb5\x31\x4d\x3c\x61\x3c\x6e\xb7\xfd\xf5\xc8\x4e\x29\x5d\x24\xd4\x9e\xa2\xd8\x6f\xfc\xbd\xf7\xe2\x2c\x8d\x31\xa6\x59\x1a\xd3\x74\xaa\xe3\x87\xf9\x1c\xaf\x76\x18\x7b\xcc\x1c\x0f\xf3\x43\xd8\x85\x39\x44\x58\xd2\x7c\x12\xbe\x40\xf6\x10\xfa\x58\xd6\x9a\x55\xa4\x1c\x3d\x14\x32\x84\x08\x4f\x55\x49\x9d\x1d\x47\x94\x57\x8e\xa4\x1d\x68\x1a\x99\xbd\x5b\x9a\x07\xd3\x36\x4b\xf3\x70\x9b\x54\x84\x4f\x36\x46\x56\x72\x1c\x23\x9c\x92\x32\xfd\x60\xde\x01\x23\xa4\x79\xe2\xdc\x7b\xfa\xdf\x36\x59\xa5\x6d\xd8\x23\x92\xf5\x5e\x90\xd2\x8c\x9e\x3a\xb8\x1d\x69\x67\x95\x4e\x17\x59\x48\x24\x39\xc6\x10\xb7\x64\xa3\x27\xeb\x1c\x52\x0a\xeb\x1e\xb4\x3e\x56\xe7\x82\xa4\x94\xce\xf6\x1f\x8d\x31\x6d\xf3\x78\xbb\xa8\x49\x78\xb6\x3f\x5a\x49\xa0\x35\xfb\x23\x85\xa8\x4c\x78\x1d\xe1\x14\x9e\x3e\xbd\x7c\x79\x26\x5e\xff\x84\xd3\xe6\x5b\x65\xfd\xca\x05\xe7\x19\x29\xbe\x2f\xc1\x44\x90\x46\x8e\xbe\x64\x2b\x6e\x92\x4a\x76\x9a\x05\x14\x01\x8f\xba\x9e\xb8\xdf\x83\x8e\x9c\xe5\xcf\x01\x33\xfa\xda\xc3\xa6\x72\xe0\x3e\xe0\x50\x27\x2b\x9e\x37\x6f\x75\x35\xd0\xe2\xde\x40\x8b\xe6\x73\x48\xa9\x54\x55\xe6\x83\xc0\xd3\xde\xf6\x19\xcd\x6a\x7a\x96\x32\x87\xb3\x62\x23\x3c\xbc\x61\x11\xcb\x79\x7f\xec\xad\x83\x2f\xec\xd6\x98\xe6\xd1\xb4\xb7\xd9\x45\xf8\x3d\x41\xea\xe7\x4e\x23\x5c\xd8\x04\xf8\x86\x56\x7d\x4f\x36\x6b\x87\xa8\xc1\x59\x0d\x1c\xa9\x83\xf5\x90\x44\x07\x08\xa8\xdc\xcb\xda\xb4\x4d\x84\x61\xd4\xe3\x44\x6d\xef\xa5\xb6\x7f\xa9\x02\xc7\xdb\x18\x4e\x05\x5b\x6f\x3e\x1d\xba\xd0\x83\x54\x8e\x25\xaf\xf2\xb5\x11\x50\x2e\x73\xb9\x56\xb1\xca\xda\xb1\x84\xd3\xb5\xbf\xc9\xc7\xe2\x5e\x1f\x8b\x8b\x8f\x6b\x1b\xcf\xfc\xef\xdf\xb6\xce\x3a\x91\xc3\x25\xef\xef\x00\x00\x00\xff\xff\xb5\xef\x9b\xff\xdc\x03\x00\x00")

func assetsErrorsCsvBytes() ([]byte, error) {
	return bindataRead(
		_assetsErrorsCsv,
		"assets/errors.csv",
	)
}

func assetsErrorsCsv() (*asset, error) {
	bytes, err := assetsErrorsCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/errors.csv", size: 988, mode: os.FileMode(420), modTime: time.Unix(1494264340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/errors.csv": assetsErrorsCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"errors.csv": &bintree{assetsErrorsCsv, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

